Frontend:
  - Automatically add machine-readable HTML comments to submit and results
    pages, to allow automation, OR add a SOAP API (check services like BLAST
    for common practice).
    - Write a command-line tool to model loops with ModLoop, to demo this
      API for Chimera integration
  - Fix CSS to properly validate.
  - Add methods to get extra stylesheets, JavaScripts.
  - Add method to get version number of the web service (see Build).
  - Add method to frontend class (or options to config file) to configure rate
    limit and period of error reporting, for debugging.

Backend:
  - Test Python coverage in unit tests.
  - Add method to get version number of the web service (see Build).
  - Add maximum number of running jobs parameter, and enforce it.
  - Add command-line admin tool to delete a job; should delete both database
    row and filesystem directory; should accept wildcards for job names;
    should work only on failed/completed/expired/archived jobs if the backend
    is running, other states only if the backend is stopped.
  - At startup, for each job in the system, check to make sure that directories
    for the same job in *different* states do not exist. For example, if the
    INCOMING job 'foo' exists in /incoming/foo/, but the directory /running/foo/
    already exists (left over from testing/failures/etc.) the system will later
    fail when it tries to move 'foo' into the RUNNING state, since the directory
    already exists.
  - Run/check jobs using DRMAA
    - Build DRMAA Python extension (fix SWIG problems with newer SWIG so that
      the example programs run).
    - Set up for both Sali and QB3 clusters; make sure we can access both via
      DRMAA from the same script (fix problems with environment variable
      clashes if necessary).
    - Make sure that DRMAA on the QB3 cluster works with users that have
      different usernames on modbase/chef (e.g. Hao, SJ, Ursula).
    - Use drmaa_wait or drmaa_synchronize to wake up backend daemon as soon
      as a job finishes (may need to thread; make sure only one event client
      per daemon); fall back to polling if the daemon is restarted.

Build:
  - Add unit tests.
  - Environment should take a version parameter; if not specified, try to run
    svnversion to get this information. Substitute @VERSION@ into generated
    webservice.py and user-provided lib/modloop.pm, etc.
  - After installing each CGI script, try to wget it using cgiroot to make sure
    the webserver is properly configured and there are no Perl compile errors.
  - Check db users access and permissions; if they do not exist, generate MySQL
    script for admin to run.
  - Check schema; if table does not exist, generate MySQL script for
    backend user to run; if table does exist but does not match, dump correct
    schema and suggest user drops table then reruns, or alters table by hand.
